generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String
  username      String?      @unique
  email         String       @unique
  password      String?
  image         String?      @map("picture")
  emailVerified DateTime?
  Profile       Profile?
  Posts         Post[]
  Sessions      Session[]
  Accounts      Account[]
  SavedPosts    SavedPosts[]
  LikedPosts    LikedPosts[]
}

model Profile {
  id        String   @id @default(cuid())
  avatar    String   @default("https://ik.imagekit.io/buw7k7rvw40/avatar_p0Wyeh2b_.svg")
  banner    String   @default("https://ik.imagekit.io/buw7k7rvw40/user_header_ztdMQDSVg.jpg?ik-sdk-version=javascript-1.4.3&updatedAt=1648647216517")
  bio       String?  @db.LongText
  createdAt DateTime @default(now())
  followers Int      @default(0)
  following Int      @default(0)
  userId    String   @unique
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id         String       @id @default(cuid())
  title      String       @db.Text
  image      String
  createdAt  DateTime     @default(now())
  isPrivate  Boolean      @default(false)
  tags       String?      @db.MediumText
  softwares  String?      @db.Text
  authorId   String
  author     User         @relation(fields: [authorId], references: [id])
  SavedPosts SavedPosts[]
  LikedPosts LikedPosts[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model SavedPosts {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model LikedPosts {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}
